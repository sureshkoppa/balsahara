/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.cdac.caseworker.Actions;

import com.cdac.caseworker.DAO.CaseWorkerDAOImpl;
import com.cdac.caseworker.DTO.CWCMeetingMinutesDTO;
import com.cdac.caseworker.DTO.AdmissiontoCHSHDTO;
import com.cdac.caseworker.DTO.CHChildHouseholdDTO;
import com.cdac.caseworker.DTO.TransferDischargeDTO;
import com.cdac.caseworker.DTO.CHEmploymentDetailsDTO;
import com.cdac.caseworker.DTO.CHFamilyCrimeDetailsDTO;
import com.cdac.caseworker.DTO.CHAfterAdmEducationDTO;
import com.cdac.caseworker.DTO.CWCMinutesOverViewDTO;
import com.cdac.caseworker.DTO.ChildDTO;
import com.cdac.caseworker.DTO.StayingPeriodOfChildDTO;
import com.cdac.caseworker.Service.CaseWorkerService;
import com.cdac.common.util.CurrentDateProvider;
import com.cdac.common.util.ServerMessageDTO;
import com.cdac.common.util.StringToDate;
import com.cdac.usermanagement.ORM.ChildDetails;
import com.cdac.usermanagement.ORM.ChildDetailsPK;
import com.cdac.usermanagement.ORM.ChildMaster;
import com.cdac.usermanagement.ORM.DistrictMaster;
import com.cdac.usermanagement.ORM.HomeDetails;
import com.cdac.usermanagement.Service.AdminService;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.SessionAware;
import com.cdac.usermanagement.ORM.InterviewRegister;
import com.cdac.usermanagement.ORM.InterviewRegisterPK;
import com.cdac.usermanagement.ORM.CasehistoryPersonal;
import com.cdac.usermanagement.ORM.CasehistoryPersonalPK;
import com.cdac.usermanagement.ORM.CasehistoryFamily;
import com.cdac.usermanagement.ORM.CasehistoryFamilyDetails;
import com.cdac.usermanagement.ORM.CasehistoryFamilyDetailsPK;
import com.cdac.usermanagement.ORM.CasehistoryAdolescenceDetails;
import com.cdac.usermanagement.ORM.CasehistoryAdolescenceDetailsPK;
import com.cdac.usermanagement.ORM.CasehistoryEmploymentDetails;
import com.cdac.usermanagement.ORM.CasehistoryPrioradmEducation;
import com.cdac.usermanagement.ORM.CasehistoryPrioradmEducationPK;
import com.cdac.usermanagement.ORM.CasehistoryFamilyCrimeDetails;
import com.cdac.usermanagement.ORM.CasehistoryAfteradmEducation;
import com.cdac.usermanagement.ORM.CasehistorySocialhistoryPrioradm;
import com.cdac.usermanagement.ORM.CasehistorySocialhistoryPrioradmPK;
import com.cdac.usermanagement.ORM.CwcMeetings;
import com.cdac.usermanagement.ORM.HomeMaster;
import com.cdac.usermanagement.ORM.CwcMinutes;
import com.cdac.usermanagement.ORM.CwcMinutesPK;
import com.cdac.usermanagement.ORM.DischargeRegister;
import java.io.File;
import java.util.HashMap;



/**
 *
 * @author Ramu Parupalli
 */

public class CaseWorkerAction extends ActionSupport implements ServletRequestAware,ModelDriven,SessionAware{

    
     private Map session;
     //spring DI  
     private CaseWorkerService caseWorkerService;
     private AdminService adminService; // for retriving home details
     private String message;
     

    private HttpServletRequest request;

    //stuff for model driven
    private ChildMaster childMaster=new ChildMaster();
    
  // for Saving casework details
     private ChildDetails childDetails=new ChildDetails();
     private ChildDetailsPK childDetailsPK =new ChildDetailsPK();
     private String childDetails_ProfileId;
     private Date childDetails_dob;
     private String religion_other;
    // private caseWorkDTO caseworkDTO=new caseWorkDTO();

     
  //For social Investigation
    // private List<ChildMaster> TranschildrenListInAHome;
     
    private List<ChildMaster> childrenListInAHome;//=new ArrayList<ChildMaster>();
      private ChildMaster child_select; //for selected child in a form
         private String childProfileId; //for getting fetched profile details

    private List<HomeDetails> homeList;
    
    //-----for admission at RHB/G/OHB/G
     private String dateTimeAdm_String;
     private String probableDischargeDate_String;
     private String intCwcJjbDate_String;
     private String orderDate_String;
     private String hour;
     private String minute;
     private String ampm;
    

    //-----for admission at CHB/G
    private String operation;
    private List<ChildMaster> transferedChildList;
    private ChildDetails transChildDetails;
    private String transChildId;
    private ChildMaster transChildMaster;
    private String test_case;
    private AdmissiontoCHSHDTO admissiontoCHSHDTO =new AdmissiontoCHSHDTO();
    
    
    
    //----for discharge
   private TransferDischargeDTO tansferDischargeDTO=new TransferDischargeDTO();
   private String userDistrictId;
   private List<String> homesInADistrict=new ArrayList<String>();
   private List<DistrictMaster> districtList;
   private String actionTaken;
   private Map districtMap; 
    //For Casehistory personal data
   private Map<String,String> homesInADistrictMap = new HashMap<String,String>();
    
    private CasehistoryPersonal casehistoryPersonal =new CasehistoryPersonal();
    private CasehistoryPersonalPK casehistoryPersonalPK = new CasehistoryPersonalPK();
    private String localResidence_other;
    private String housingType_other;
    private String reasonLeavingFamily_other;
    private String verbalAbuse_other;
    private String sexualAbuse_other;
    private String otherAbuse_other;
    private String illtreatDenialFood_other;
    private String illtreatBeatenMercilessly_other;
    private String illtreatCauseInjury_other;
    private String illtreatOthers_other;
    private String exploitationChild_other;
    private String childStayPriorAdmission_other;  
    private String hsbaOthers_data;
    private List<HomeMaster> homeMasters;
    private String homeId;
    /*Added by vinumol 08-03-2012*/
    private String testing;
    private List<DischargeRegister> child_profid_list =new ArrayList<DischargeRegister> () ;
    
    private String discharge_fromdate;
    private String discharge_todate;
    private String disreg_profid;
    private List<InterviewRegister> interviewRegisterChild;
    private List<CasehistoryPersonal> caseHistoryChildlist;
    private List<ChildMaster> admissionRegister_show;
    private String admission_fromdate;
    private String admission_todate;
    private List<ChildDetails> childPIDList;
    private DischargeRegister dreg=new DischargeRegister();
      /*Ended by vinumol 08-03-2012*/
    
    /*Added By Anupam on 3-7-2012 START*/
    private String childProfileIdAndDateOfCaseWork;
    
    private File childImage;
    
    
    private List<ChildDTO> childDTOList;
    
    private ServerMessageDTO serverMessage = new ServerMessageDTO();
    

    public ServerMessageDTO getServerMessage() {
        return serverMessage;
    }

    public void setServerMessage(ServerMessageDTO serverMessage) {
        this.serverMessage = serverMessage;
    }
    
    
    

    public List<ChildDTO> getChildDTOList() {
        return childDTOList;
    }

    public void setChildDTOList(List<ChildDTO> childDTOList) {
        this.childDTOList = childDTOList;
    }

    public File getChildImage() {
        return childImage;
    }

    public void setChildImage(File childImage) {
        this.childImage = childImage;
    }

    
    
    
    public String getChildProfileIdAndDateOfCaseWork() {
        return childProfileIdAndDateOfCaseWork;
    }

    public void setChildProfileIdAndDateOfCaseWork(String childProfileIdAndDateOfCaseWork) {
        this.childProfileIdAndDateOfCaseWork = childProfileIdAndDateOfCaseWork;
    }
    
    
    /*Added By Anupam on 3-7-2012 END*/

    public DischargeRegister getDreg() {
        return dreg;
    }

    public void setDreg(DischargeRegister dreg) {
        this.dreg = dreg;
    }

    public String getAdmission_fromdate() {
        return admission_fromdate;
    }

    public void setAdmission_fromdate(String admission_fromdate) {
        this.admission_fromdate = admission_fromdate;
    }

    public String getAdmission_todate() {
        return admission_todate;
    }

    public void setAdmission_todate(String admission_todate) {
        this.admission_todate = admission_todate;
    }

    public List<CasehistoryPersonal> getCaseHistoryChildlist() {
        return caseHistoryChildlist;
    }

    public void setCaseHistoryChildlist(List<CasehistoryPersonal> caseHistoryChildlist) {
        this.caseHistoryChildlist = caseHistoryChildlist;
    }

    public List<ChildDetails> getChildPIDList() {
        return childPIDList;
    }

    public void setChildPIDList(List<ChildDetails> childPIDList) {
        this.childPIDList = childPIDList;
    }

    public List<DischargeRegister> getChild_profid_list() {
        return child_profid_list;
    }

    public void setChild_profid_list(List<DischargeRegister> child_profid_list) {
        this.child_profid_list = child_profid_list;
    }

    public String getDischarge_fromdate() {
        return discharge_fromdate;
    }

    public void setDischarge_fromdate(String discharge_fromdate) {
        this.discharge_fromdate = discharge_fromdate;
    }

    public String getDischarge_todate() {
        return discharge_todate;
    }

    public void setDischarge_todate(String discharge_todate) {
        this.discharge_todate = discharge_todate;
    }

    public String getDisreg_profid() {
        return disreg_profid;
    }

    public void setDisreg_profid(String disreg_profid) {
        this.disreg_profid = disreg_profid;
    }

    public List<InterviewRegister> getInterviewRegisterChild() {
        return interviewRegisterChild;
    }

    public void setInterviewRegisterChild(List<InterviewRegister> interviewRegisterChild) {
        this.interviewRegisterChild = interviewRegisterChild;
    }

    public String getTesting() {
        return testing;
    }

    public void setTesting(String testing) {
        this.testing = testing;
    }
    
    //anupam added this on 8-2-2012 START
    private List<CWCMinutesOverViewDTO> cwcMeetingOverViewDTOList;
    //anupam added this on 8-2-2012 END

    public String getHomeId() {
        return homeId;
    }

    public void setHomeId(String homeId) {
        this.homeId = homeId;
    }
    
    

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
       
    
    public CasehistoryPersonal getCasehistoryPersonal() {
        return casehistoryPersonal;
    }

    public void setCasehistoryPersonal(CasehistoryPersonal casehistoryPersonal) {
        this.casehistoryPersonal = casehistoryPersonal;
    }

    public CasehistoryPersonalPK getCasehistoryPersonalPK() {
        return casehistoryPersonalPK;
    }

    public void setCasehistoryPersonalPK(CasehistoryPersonalPK casehistoryPersonalPK) {
        this.casehistoryPersonalPK = casehistoryPersonalPK;
    }

    public String getChildStayPriorAdmission_other() {
        return childStayPriorAdmission_other;
    }

    public void setChildStayPriorAdmission_other(String childStayPriorAdmission_other) {
        this.childStayPriorAdmission_other = childStayPriorAdmission_other;
    }

    public String getExploitationChild_other() {
        return exploitationChild_other;
    }

    public void setExploitationChild_other(String exploitationChild_other) {
        this.exploitationChild_other = exploitationChild_other;
    }

    public String getHousingType_other() {
        return housingType_other;
    }

    public void setHousingType_other(String housingType_other) {
        this.housingType_other = housingType_other;
    }

    public String getIlltreatBeatenMercilessly_other() {
        return illtreatBeatenMercilessly_other;
    }

    public void setIlltreatBeatenMercilessly_other(String illtreatBeatenMercilessly_other) {
        this.illtreatBeatenMercilessly_other = illtreatBeatenMercilessly_other;
    }

    public String getIlltreatCauseInjury_other() {
        return illtreatCauseInjury_other;
    }

    public void setIlltreatCauseInjury_other(String illtreatCauseInjury_other) {
        this.illtreatCauseInjury_other = illtreatCauseInjury_other;
    }

    public String getIlltreatDenialFood_other() {
        return illtreatDenialFood_other;
    }

    public void setIlltreatDenialFood_other(String illtreatDenialFood_other) {
        this.illtreatDenialFood_other = illtreatDenialFood_other;
    }

    public String getIlltreatOthers_other() {
        return illtreatOthers_other;
    }

    public void setIlltreatOthers_other(String illtreatOthers_other) {
        this.illtreatOthers_other = illtreatOthers_other;
    }

    public String getLocalResidence_other() {
        return localResidence_other;
    }

    public void setLocalResidence_other(String localResidence_other) {
        this.localResidence_other = localResidence_other;
    }

    public String getOtherAbuse_other() {
        return otherAbuse_other;
    }

    public void setOtherAbuse_other(String otherAbuse_other) {
        this.otherAbuse_other = otherAbuse_other;
    }

    public String getReasonLeavingFamily_other() {
        return reasonLeavingFamily_other;
    }

    public void setReasonLeavingFamily_other(String reasonLeavingFamily_other) {
        this.reasonLeavingFamily_other = reasonLeavingFamily_other;
    }

    public HttpServletRequest getRequest() {
        return request;
    }

    public void setRequest(HttpServletRequest request) {
        this.request = request;
    }

    public String getSexualAbuse_other() {
        return sexualAbuse_other;
    }

    public void setSexualAbuse_other(String sexualAbuse_other) {
        this.sexualAbuse_other = sexualAbuse_other;
    }

    public String getVerbalAbuse_other() {
        return verbalAbuse_other;
    }

    public void setVerbalAbuse_other(String verbalAbuse_other) {
        this.verbalAbuse_other = verbalAbuse_other;
    }

    public String getHsbaOthers_data() {
        return hsbaOthers_data;
    }

    public void setHsbaOthers_data(String hsbaOthers_data) {
        this.hsbaOthers_data = hsbaOthers_data;
    }
     
    
   // End of Casehistory personal data
    
    // For Casehistory childhousehold details
    private CasehistoryFamily casehistoryFamily=new CasehistoryFamily();
    private  List<CHChildHouseholdDTO> cHChildHouseholdDTO;
    private String[] nameRelative;
    private String[] relationship;
    private Integer[] age;
    private String[] health;
    private String[] occupation;
    private String[] handicap;
    private String[] education;
    private String[] income;
    private String[] historyMentalIllness;
    private String[] habit;
    private String[] socialization;
    private String[] gender;
    
    
    //anupam added on 29-02-2012 START
    private String childName;
    private String cwcNo;
    //anupam added on 29-02-2012 END

    public Map<String, String> getHomesInADistrictMap() {
        return homesInADistrictMap;
    }

    public void setHomesInADistrictMap(Map<String, String> homesInADistrictMap) {
        this.homesInADistrictMap = homesInADistrictMap;
    }
        

    public String getChildName() {
        return childName;
    }

    public void setChildName(String childName) {
        /*//System.out.println("-----------------setting child name -------- childName= "+childName+" "+childName.trim().equals(""));
        if(childName == null || childName.trim().equals(""))
            this.childName="NA";
        else*/
        this.childName = childName;
    }

    public String getCwcNo() {
        return cwcNo;
    }

    public void setCwcNo(String cwcNo) {
        /*if(cwcNo == null || cwcNo.trim().equals(""))
            this.cwcNo="NA";
        else*/
        this.cwcNo = cwcNo;
    }
    
    
    

    public Integer[] getAge() 
    {
        return age;
    }

    public void setAge(Integer[] age) 
    {
        this.age = age;
    }

    public List<CHChildHouseholdDTO> getcHChildHouseholdDTO() 
    {
        return cHChildHouseholdDTO;
    }

    public void setcHChildHouseholdDTO(List<CHChildHouseholdDTO> cHChildHouseholdDTO) 
    {
        this.cHChildHouseholdDTO = cHChildHouseholdDTO;
    }

    public String[] getEducation() 
    {
        return education;
    }

    public void setEducation(String[] education)
    {
        this.education = education;
    }

    public String[] getHandicap() 
    {
        return handicap;
    }

    public void setHandicap(String[] handicap)
    {
        this.handicap = handicap;
    }

    public String[] getHealth()
    {
        return health;
    }

    public void setHealth(String[] health)
    {
        this.health = health;
    }

    public String[] getIncome() 
    {
        return income;
    }

    public void setIncome(String[] income) 
    {
        this.income = income;
    }

    public String[] getNameRelative() 
    {
        return nameRelative;
    }

    public void setNameRelative(String[] nameRelative) 
    {
        this.nameRelative = nameRelative;
    }

    public String[] getOccupation() 
    {
        return occupation;
    }

    public void setOccupation(String[] occupation) 
    {
        this.occupation = occupation;
    }

    public String[] getRelationship() 
    {
        return relationship;
    }

    public void setRelationship(String[] relationship) 
    {
        this.relationship = relationship;
    }

    public CasehistoryFamily getCasehistoryFamily() 
    {
        return casehistoryFamily;
    }

    public void setCasehistoryFamily(CasehistoryFamily casehistoryFamily) 
    {
        this.casehistoryFamily = casehistoryFamily;
    }

    public String[] getGender() 
    {
        return gender;
    }

    public void setGender(String[] gender) 
    {
        this.gender = gender;
    }

    public String[] getHabit() 
    {
        return habit;
    }

    public void setHabit(String[] habit) 
    {
        this.habit = habit;
    }

    public String[] getHistoryMentalIllness() 
    {
        return historyMentalIllness;
    }

    public void setHistoryMentalIllness(String[] historyMentalIllness) 
    {
        this.historyMentalIllness = historyMentalIllness;
    }

    public String[] getSocialization() 
    {
        return socialization;
    }

    public void setSocialization(String[] socialization)
    {
        this.socialization = socialization;
    }   
     
    //end of Casehistory childhousehold details
    
    // Start of casehistiry family details
    
    private CasehistoryFamilyDetails casehistoryFamilyDetails=new CasehistoryFamilyDetails();
    private CasehistoryFamilyDetailsPK casehistoryFamilyDetailsPK=new CasehistoryFamilyDetailsPK();
    private String propertyFamilyVehicals_other;

    public CasehistoryFamilyDetails getCasehistoryFamilyDetails() 
    {
        return casehistoryFamilyDetails;
    }

    public void setCasehistoryFamilyDetails(CasehistoryFamilyDetails casehistoryFamilyDetails) 
    {
        this.casehistoryFamilyDetails = casehistoryFamilyDetails;
    }

    public CasehistoryFamilyDetailsPK getCasehistoryFamilyDetailsPK() 
    {
        return casehistoryFamilyDetailsPK;
    }

    public void setCasehistoryFamilyDetailsPK(CasehistoryFamilyDetailsPK casehistoryFamilyDetailsPK) 
    {
        this.casehistoryFamilyDetailsPK = casehistoryFamilyDetailsPK;
    }

    public String getPropertyFamilyVehicals_other() 
    {
        return propertyFamilyVehicals_other;
    }

    public void setPropertyFamilyVehicals_other(String propertyFamilyVehicals_other) 
    {
        this.propertyFamilyVehicals_other = propertyFamilyVehicals_other;
    }
    
    
    
    // End of casehistiry family details
    
    //Start of Casehistory Adolescence History
     private CasehistoryAdolescenceDetails casehistoryAdolescenceDetails=new CasehistoryAdolescenceDetails();
     private CasehistoryAdolescenceDetailsPK casehistoryAdolescenceDetailsPK=new CasehistoryAdolescenceDetailsPK();

    public CasehistoryAdolescenceDetails getCasehistoryAdolescenceDetails() {
        return casehistoryAdolescenceDetails;
    }

    public void setCasehistoryAdolescenceDetails(CasehistoryAdolescenceDetails casehistoryAdolescenceDetails) {
        this.casehistoryAdolescenceDetails = casehistoryAdolescenceDetails;
    }

    public CasehistoryAdolescenceDetailsPK getCasehistoryAdolescenceDetailsPK() {
        return casehistoryAdolescenceDetailsPK;
    }

    public void setCasehistoryAdolescenceDetailsPK(CasehistoryAdolescenceDetailsPK casehistoryAdolescenceDetailsPK) {
        this.casehistoryAdolescenceDetailsPK = casehistoryAdolescenceDetailsPK;
    }
             
    
    
    //End of Casehistory Adolescence History
    
    //Start of caseHistory Employment Details
   
     private CasehistoryEmploymentDetails casehistoryEmploymentDetails=new CasehistoryEmploymentDetails(); 
     private  List<CHEmploymentDetailsDTO> cHEmploymentDetailsDTO;
     private String[] detailsEmployment;
     private String[] duration;
     private String[] wagesEarned;
     private String[] experienceatwork;
     private String[] detailsEmployment_other;

    public List<CHEmploymentDetailsDTO> getcHEmploymentDetailsDTO() {
        return cHEmploymentDetailsDTO;
    }

    public void setcHEmploymentDetailsDTO(List<CHEmploymentDetailsDTO> cHEmploymentDetailsDTO) {
        this.cHEmploymentDetailsDTO = cHEmploymentDetailsDTO;
    }

    public CasehistoryEmploymentDetails getCasehistoryEmploymentDetails() {
        return casehistoryEmploymentDetails;
    }

    public void setCasehistoryEmploymentDetails(CasehistoryEmploymentDetails casehistoryEmploymentDetails) {
        this.casehistoryEmploymentDetails = casehistoryEmploymentDetails;
    }

    public String[] getDetailsEmployment() {
        return detailsEmployment;
    }

    public void setDetailsEmployment(String[] detailsEmployment) {
        this.detailsEmployment = detailsEmployment;
    }

    public String[] getDetailsEmployment_other() {
        return detailsEmployment_other;
    }

    public void setDetailsEmployment_other(String[] detailsEmployment_other) {
        this.detailsEmployment_other = detailsEmployment_other;
    }

    public String[] getDuration() {
        return duration;
    }

    public void setDuration(String[] duration) {
        this.duration = duration;
    }

    public String[] getWagesEarned() {
        return wagesEarned;
    }

    public void setWagesEarned(String[] wagesEarned) {
        this.wagesEarned = wagesEarned;
    }

    public String[] getExperienceatwork() {
        return experienceatwork;
    }

    public void setExperienceatwork(String[] experienceatwork) {
        this.experienceatwork = experienceatwork;
    }
    
    
   //------------------End of caseHistory Employment Details------------------------------
    
    //************Start of casehistory Prior Admission Education Details********************
    
    private CasehistoryPrioradmEducation casehistoryPrioradmEducation =new CasehistoryPrioradmEducation();
    private CasehistoryPrioradmEducationPK casehistoryPrioradmEducationPK=new CasehistoryPrioradmEducationPK();
    private String reasonLeavingSchool_other;
    private String mediumInstruction_other;
    
    public CasehistoryPrioradmEducation getCasehistoryPrioradmEducation() {
        return casehistoryPrioradmEducation;
    }

    public void setCasehistoryPrioradmEducation(CasehistoryPrioradmEducation casehistoryPrioradmEducation) {
        this.casehistoryPrioradmEducation = casehistoryPrioradmEducation;
    }

    public CasehistoryPrioradmEducationPK getCasehistoryPrioradmEducationPK() {
        return casehistoryPrioradmEducationPK;
    }

    public void setCasehistoryPrioradmEducationPK(CasehistoryPrioradmEducationPK casehistoryPrioradmEducationPK) {
        this.casehistoryPrioradmEducationPK = casehistoryPrioradmEducationPK;
    }

    public String getMediumInstruction_other() {
        return mediumInstruction_other;
    }

    public void setMediumInstruction_other(String mediumInstruction_other) {
        this.mediumInstruction_other = mediumInstruction_other;
    }

    public String getReasonLeavingSchool_other() {
        return reasonLeavingSchool_other;
    }

    public void setReasonLeavingSchool_other(String reasonLeavingSchool_other) {
        this.reasonLeavingSchool_other = reasonLeavingSchool_other;
    }
    
    //************End of casehistory Prior Admission Education Details********************
    
    //^^^^^^^^^^^^^^Start of Casehistory Family Crime details^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    private CasehistoryFamilyCrimeDetails casehistoryFamilyCrimeDetails=new CasehistoryFamilyCrimeDetails(); 
     private  List<CHFamilyCrimeDetailsDTO> cHFamilyCrimeDetailsDTO;
    
    private String[] name;
    private String[] relationship_crime;
    private String[] natureCrime;
    private String[] arrestMade;
    private String[] periodConfinement;
    private String[]  punishment;

    public String[] getArrestMade() {
        return arrestMade;
    }

    public void setArrestMade(String[] arrestMade) {
        this.arrestMade = arrestMade;
    }

    public List<CHFamilyCrimeDetailsDTO> getcHFamilyCrimeDetailsDTO() {
        return cHFamilyCrimeDetailsDTO;
    }

    public void setcHFamilyCrimeDetailsDTO(List<CHFamilyCrimeDetailsDTO> cHFamilyCrimeDetailsDTO) {
        this.cHFamilyCrimeDetailsDTO = cHFamilyCrimeDetailsDTO;
    }

    public CasehistoryFamilyCrimeDetails getCasehistoryFamilyCrimeDetails() {
        return casehistoryFamilyCrimeDetails;
    }

    public void setCasehistoryFamilyCrimeDetails(CasehistoryFamilyCrimeDetails casehistoryFamilyCrimeDetails) {
        this.casehistoryFamilyCrimeDetails = casehistoryFamilyCrimeDetails;
    }

    public String[] getName() {
        return name;
    }

    public void setName(String[] name) {
        this.name = name;
    }

    public String[] getNatureCrime() {
        return natureCrime;
    }

    public void setNatureCrime(String[] natureCrime) {
        this.natureCrime = natureCrime;
    }

    public String[] getPeriodConfinement() {
        return periodConfinement;
    }

    public void setPeriodConfinement(String[] periodConfinement) {
        this.periodConfinement = periodConfinement;
    }

    public String[] getPunishment() {
        return punishment;
    }

    public void setPunishment(String[] punishment) {
        this.punishment = punishment;
    }

    public String[] getRelationship_crime() {
        return relationship_crime;
    }

    public void setRelationship_crime(String[] relationship_crime) {
        this.relationship_crime = relationship_crime;
    }

   //^^^^^^^^^^^^^^End of Casehistory Family Crime details^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    
    //#################Start of Casehistory After Admission Education Details####################
    private String[] typeAdmission;
    private Integer[] yearAdmission;
    private Integer[] yearCompletion;
    private String[] detailsAdmission;
    private String[] proficiency;
    private String[] nameAdmission;
    private CasehistoryAfteradmEducation casehistoryAfteradmEducation=new CasehistoryAfteradmEducation(); 
    private  List<CHAfterAdmEducationDTO> cHAfterAdmEducationDTO;

    public List<CHAfterAdmEducationDTO> getcHAfterAdmEducationDTO() {
        return cHAfterAdmEducationDTO;
    }

    public void setcHAfterAdmEducationDTO(List<CHAfterAdmEducationDTO> cHAfterAdmEducationDTO) {
        this.cHAfterAdmEducationDTO = cHAfterAdmEducationDTO;
    }

    public CasehistoryAfteradmEducation getCasehistoryAfteradmEducation() {
        return casehistoryAfteradmEducation;
    }

    public void setCasehistoryAfteradmEducation(CasehistoryAfteradmEducation casehistoryAfteradmEducation) {
        this.casehistoryAfteradmEducation = casehistoryAfteradmEducation;
    }

    public String[] getDetailsAdmission() {
        return detailsAdmission;
    }

    public void setDetailsAdmission(String[] detailsAdmission) {
        this.detailsAdmission = detailsAdmission;
    }

    public String[] getNameAdmission() {
        return nameAdmission;
    }

    public void setNameAdmission(String[] nameAdmission) {
        this.nameAdmission = nameAdmission;
    }

    public String[] getProficiency() {
        return proficiency;
    }

    public void setProficiency(String[] proficiency) {
        this.proficiency = proficiency;
    }

    public String[] getTypeAdmission() {
        return typeAdmission;
    }

    public void setTypeAdmission(String[] typeAdmission) {
        this.typeAdmission = typeAdmission;
    }

    public Integer[] getYearAdmission() {
        return yearAdmission;
    }

    public void setYearAdmission(Integer[] yearAdmission) {
        this.yearAdmission = yearAdmission;
    }

    public Integer[] getYearCompletion() {
        return yearCompletion;
    }

    public void setYearCompletion(Integer[] yearCompletion) {
        this.yearCompletion = yearCompletion;
    }
 
 //################# End of Casehistory After Admission Education Details####################
    
    
//@@@@@@@@@@@@@@@@@@@@@ Start of  Case History Child Social History Details @@@@@@@@@@@@@@@@@@@@
    
    private CasehistorySocialhistoryPrioradm casehistorySocialhistoryPrioradm=new CasehistorySocialhistoryPrioradm();
    private CasehistorySocialhistoryPrioradmPK casehistorySocialhistoryPrioradmPK = new CasehistorySocialhistoryPrioradmPK();
    private String friendshipDetails_other;
    private String purposeMembership_other;

    public CasehistorySocialhistoryPrioradm getCasehistorySocialhistoryPrioradm() {
        return casehistorySocialhistoryPrioradm;
    }

    public void setCasehistorySocialhistoryPrioradm(CasehistorySocialhistoryPrioradm casehistorySocialhistoryPrioradm) {
        this.casehistorySocialhistoryPrioradm = casehistorySocialhistoryPrioradm;
    }

    public CasehistorySocialhistoryPrioradmPK getCasehistorySocialhistoryPrioradmPK() {
        return casehistorySocialhistoryPrioradmPK;
    }

    public void setCasehistorySocialhistoryPrioradmPK(CasehistorySocialhistoryPrioradmPK casehistorySocialhistoryPrioradmPK) {
        this.casehistorySocialhistoryPrioradmPK = casehistorySocialhistoryPrioradmPK;
    }

    public String getFriendshipDetails_other() {
        return friendshipDetails_other;
    }

    public void setFriendshipDetails_other(String friendshipDetails_other) {
        this.friendshipDetails_other = friendshipDetails_other;
    }

    public String getPurposeMembership_other() {
        return purposeMembership_other;
    }

    public void setPurposeMembership_other(String purposeMembership_other) {
        this.purposeMembership_other = purposeMembership_other;
    }
    
    
//@@@@@@@@@@@@@@@@@@@@@ End of  Case History Child Social History Details @@@@@@@@@@@@@@@@@@@@
    //------For Interview Register----------------------------------//
    private InterviewRegister interviewRegister = new InterviewRegister();
    private InterviewRegisterPK interviewRegisterPK = new InterviewRegisterPK();
    private String interviewDate_String;
    private String deliquentBehaviour_other;
    private String reasonDeliquentBehaviour_other;
    private String savingDetails_other;
    private String habits_drug;
    private List<InterviewRegister> interviewRegister_show;
    private String interviewTime_String;

    public String getInterviewTime_String() {
        return interviewTime_String;
    }

    public void setInterviewTime_String(String interviewTime_String) {
        this.interviewTime_String = interviewTime_String;
    }
    public String getInterviewDate_String() {
        return interviewDate_String;
    }

    public void setInterviewDate_String(String interviewDate_String) {
        this.interviewDate_String = interviewDate_String;
    }

    public InterviewRegister getInterviewRegister() {
        return interviewRegister;
    }

    public void setInterviewRegister(InterviewRegister interviewRegister) {
        this.interviewRegister = interviewRegister;
    }

    public InterviewRegisterPK getInterviewRegisterPK() {
        return interviewRegisterPK;
    }

    public void setInterviewRegisterPK(InterviewRegisterPK interviewRegisterPK) {
        this.interviewRegisterPK = interviewRegisterPK;
    }

    public List<InterviewRegister> getInterviewRegister_show() {
        return interviewRegister_show;
    }

    public void setInterviewRegister_show(List<InterviewRegister> interviewRegister_show) {
        this.interviewRegister_show = interviewRegister_show;
    }
    
    
    
    //------------End Interview Register

    public String getDeliquentBehaviour_other() {
        return deliquentBehaviour_other;
    }

    public void setDeliquentBehaviour_other(String deliquentBehaviour_other) {
        this.deliquentBehaviour_other = deliquentBehaviour_other;
    }

    public String getHabits_drug() {
        return habits_drug;
    }

    public void setHabits_drug(String habits_drug) {
        this.habits_drug = habits_drug;
    }

    public String getReasonDeliquentBehaviour_other() {
        return reasonDeliquentBehaviour_other;
    }

    public void setReasonDeliquentBehaviour_other(String reasonDeliquentBehaviour_other) {
        this.reasonDeliquentBehaviour_other = reasonDeliquentBehaviour_other;
    }

    public String getSavingDetails_other() {
        return savingDetails_other;
    }

    public void setSavingDetails_other(String savingDetails_other) {
        this.savingDetails_other = savingDetails_other;
    }
    
    
    
    
    private String formName;

    public String getFormName() {
        return formName;
    }

    public void setFormName(String formName) {
        this.formName = formName;
    }
    

    
    
    
    
    public String getActionTaken() {
        return actionTaken;
    }

    public void setActionTaken(String actionTaken) {
        this.actionTaken = actionTaken;
    }
    
    
    
    

    public String getTest_case() {
        return test_case;
    }

    public void setTest_case(String test_case) {
        this.test_case = test_case;
    }

    public HttpServletRequest getServletRequest() {
        return request;
    }

    public void setServletRequest(HttpServletRequest request) {
        this.request = request;
    }

    public String getUserDistrictId() {
        return userDistrictId;
    }

    public void setUserDistrictId(String userDistrictId) {
        this.userDistrictId = userDistrictId;
    }

    
    public String getDateTimeAdm_String() {
        return dateTimeAdm_String;
    }

    public void setDateTimeAdm_String(String dateTimeAdm_String) {
        this.dateTimeAdm_String = dateTimeAdm_String;
    }

    public String getProbableDischargeDate_String() {
        return probableDischargeDate_String;
    }

    public void setProbableDischargeDate_String(String probableDischargeDate_String) {
        this.probableDischargeDate_String = probableDischargeDate_String;
    }

    public ChildDetails getTransChildDetails() {
        return transChildDetails;
    }

    public void setTransChildDetails(ChildDetails transChildDetails) {
        this.transChildDetails = transChildDetails;
    }

    public AdmissiontoCHSHDTO getAdmissiontoCHSHDTO() {
        return admissiontoCHSHDTO;
    }

    public void setAdmissiontoCHSHDTO(AdmissiontoCHSHDTO admissiontoCHSHDTO) {
        this.admissiontoCHSHDTO = admissiontoCHSHDTO;
    }

  
    public List<String> getHomesInADistrict() {
        return homesInADistrict;
    }

    public void setHomesInADistrict(List<String> homesInADistrict) {
        this.homesInADistrict = homesInADistrict;
    }

    public List<DistrictMaster> getDistrictList() {
        return districtList;
    }

    public void setDistrictList(List<DistrictMaster> districtList) {
        this.districtList = districtList;
    }

    public Map getDistrictMap() {
        return districtMap;
    }

    public void setDistrictMap(Map districtMap) {
        this.districtMap = districtMap;
    }
    
    

    public String getIntCwcJjbDate_String() {
        return intCwcJjbDate_String;
    }
    
    public void setIntCwcJjbDate_String(String intCwcJjbDate_String) {
        this.intCwcJjbDate_String = intCwcJjbDate_String;
    }

    public String getOrderDate_String() {
        return orderDate_String;
    }

    public void setOrderDate_String(String orderDate_String) {
        this.orderDate_String = orderDate_String;
    }

    public String getHour() {
        return hour;
    }

    public void setHour(String hour) {
        this.hour = hour;
    }

    public String getMinute() {
        return minute;
    }

    public void setMinute(String minute) {
        this.minute = minute;
    }

    public String getAmpm() {
        return ampm;
    }

    public void setAmpm(String ampm) {
        this.ampm = ampm;
    }
    
    public CaseWorkerService getCaseWorkerService() {
        return caseWorkerService;
    }

    public void setCaseWorkerService(CaseWorkerService caseWorkerService) {
        this.caseWorkerService = caseWorkerService;
    }

    public AdminService getAdminService() {
        return adminService;
    }

    public void setAdminService(AdminService adminService) {
        this.adminService = adminService;
    }

    public ChildMaster getChildMaster() {
        return childMaster;
    }

    public void setChildMaster(ChildMaster childMaster) {
        this.childMaster = childMaster;
    }

    public List<ChildMaster> getChildrenListInAHome() {
        return childrenListInAHome;
    }

    public void setChildrenListInAHome(List<ChildMaster> childrenListInAHome) {
        this.childrenListInAHome = childrenListInAHome;
    }

    public List<HomeDetails> getHomeList() {
        return homeList;
    }

    public void setHomeList(List<HomeDetails> homeList) {
        this.homeList = homeList;
    }

    public TransferDischargeDTO getTansferDischargeDTO() {
        return tansferDischargeDTO;
    }

    public void setTansferDischargeDTO(TransferDischargeDTO tansferDischargeDTO) {
        this.tansferDischargeDTO = tansferDischargeDTO;
    }

    public String getOperation() {
        return operation;
    }

    public void setOperation(String operation) {
        this.operation = operation;
    }

    public List<ChildMaster> getTransferedChildList() {
        return transferedChildList;
    }

    public void setTransferedChildList(List<ChildMaster> transferedChildList) {
        this.transferedChildList = transferedChildList;
    }

    public ChildMaster getTransChildMaster() {
        return transChildMaster;
    }

    public void setTransChildMaster(ChildMaster transChildMaster) {
        this.transChildMaster = transChildMaster;
    }

    public String getTransChildId() {
        return transChildId;
    }

    public void setTransChildId(String transChildId) {
        this.transChildId = transChildId;
    }

    public ChildMaster getChild_select() {
        return child_select;
    }

    public void setChild_select(ChildMaster child_select) {
        this.child_select = child_select;
    }

    public String getChildProfileId() {
        return childProfileId;
    }

    public void setChildProfileId(String childProfileId) {
        this.childProfileId = childProfileId;
    }

    public ChildDetails getChildDetails() {
        return childDetails;
    }

    public void setChildDetails(ChildDetails childDetails) {
        this.childDetails = childDetails;
    }

    public String getChildDetails_ProfileId() {
        return childDetails_ProfileId;
    }

    public void setChildDetails_ProfileId(String childDetails_ProfileId) {
        this.childDetails_ProfileId = childDetails_ProfileId;
    }

    public ChildDetailsPK getChildDetailsPK() {
        return childDetailsPK;
    }

    public void setChildDetailsPK(ChildDetailsPK childDetailsPK) {
        this.childDetailsPK = childDetailsPK;
    }


    public Map getSession() {
        return session;
    }

    public void setSession(Map session) {
        this.session = session;
    }

    public Date getChildDetails_dob() {
        return childDetails_dob;
    }

    public void setChildDetails_dob(String childDetails_dob) {
        DateFormat dfopreg=new SimpleDateFormat("dd/MM/yyyy");
        try
        {
            this.childDetails_dob = dfopreg.parse(childDetails_dob);
        }
        catch(ParseException pe)
        {
            pe.printStackTrace();
        }
       // this.childDetails_dob = childDetails_dob;
    }

    public String getReligion_other() {
        return religion_other;
    }

    public void setReligion_other(String religion_other) {
        this.religion_other = religion_other;
    }

    public List<HomeMaster> getHomeMasters() {
        return homeMasters;
    }

    public void setHomeMasters(List<HomeMaster> homeMasters) {
        this.homeMasters = homeMasters;
    }
    
    //for CWC Meetings minutes Register Start//
    
      private String dateofcwcmeeting;
      private String venue;
      private int noOfMembers;
      private String designation;
      private  List<CWCMeetingMinutesDTO> cWCMeetingMinutesDTOs;
      private CwcMinutes cwcMinutes=new CwcMinutes();
      private CwcMinutesPK cwcMinutesPK=new CwcMinutesPK();
      private CwcMeetings cwcMeetings=new CwcMeetings();
      private List<Date> cwcMinuteslist;
      private String cwc_fromdate;
      private String cwc_todate;
      private String selectedMeetingdate;
      
      private List<CwcMinutes> minuteses;
      
      private String[] childProfileId_cwc;
      private String[] observations;
      private String[] actiontobeTaken;
      private String[] followUp;
      private String[] orderIssued;
      private String[] cwcJjbOrderNo;
      private String[] remarks;
      

    public List<ChildMaster> getAdmissionRegister_show() {
        return admissionRegister_show;
    }

    public void setAdmissionRegister_show(List<ChildMaster> admissionRegister_show) {
        this.admissionRegister_show = admissionRegister_show;
    }
    public List<CwcMinutes> getMinuteses() {
        return minuteses;
    }

    public void setMinuteses(List<CwcMinutes> minuteses) {
        this.minuteses = minuteses;
    }
    
    

    public String getSelectedMeetingdate() {
        return selectedMeetingdate;
    }

    public void setSelectedMeetingdate(String selectedMeetingdate) {
        this.selectedMeetingdate = selectedMeetingdate;
    }

    
    
    public String getCwc_fromdate() {
        return cwc_fromdate;
    }

    public void setCwc_fromdate(String cwc_fromdate) {
        this.cwc_fromdate = cwc_fromdate;
    }

    public String getCwc_todate() {
        return cwc_todate;
    }

    public void setCwc_todate(String cwc_todate) {
        this.cwc_todate = cwc_todate;
    }

    public List<Date> getCwcMinuteslist() {
        return cwcMinuteslist;
    }

    public void setCwcMinuteslist(List<Date> cwcMinuteslist) {
        this.cwcMinuteslist = cwcMinuteslist;
    }

    
   
    
    
    public CwcMeetings getCwcMeetings() {
        return cwcMeetings;
    }

    public void setCwcMeetings(CwcMeetings cwcMeetings) {
        this.cwcMeetings = cwcMeetings;
    }
      
  
    
    
    public String getDateofcwcmeeting() {
        return dateofcwcmeeting;
    }

    public void setDateofcwcmeeting(String dateofcwcmeeting) {
        this.dateofcwcmeeting = dateofcwcmeeting;
    }

    public String getDesignation() {
        return designation;
    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public int getNoOfMembers() {
        return noOfMembers;
    }

    public void setNoOfMembers(int noOfMembers) {
        this.noOfMembers = noOfMembers;
    }

    public String getVenue() {
        return venue;
    }

    public void setVenue(String venue) {
        this.venue = venue;
    }

    public String[] getActiontobeTaken() {
        return actiontobeTaken;
    }

    public void setActiontobeTaken(String[] actiontobeTaken) {
        this.actiontobeTaken = actiontobeTaken;
    }

    public String[] getChildProfileId_cwc() {
        return childProfileId_cwc;
    }

    public void setChildProfileId_cwc(String[] childProfileId_cwc) {
        this.childProfileId_cwc = childProfileId_cwc;
    }

    public String[] getCwcJjbOrderNo() {
        return cwcJjbOrderNo;
    }

    public void setCwcJjbOrderNo(String[] cwcJjbOrderNo) {
        this.cwcJjbOrderNo = cwcJjbOrderNo;
    }

    public String[] getFollowUp() {
        return followUp;
    }

    public void setFollowUp(String[] followUp) {
        this.followUp = followUp;
    }

    public String[] getObservations() {
        return observations;
    }

    public void setObservations(String[] observations) {
        this.observations = observations;
    }

    public String[] getOrderIssued() {
        return orderIssued;
    }

    public void setOrderIssued(String[] orderIssued) {
        this.orderIssued = orderIssued;
    }

    public String[] getRemarks() {
        return remarks;
    }

    public void setRemarks(String[] remarks) {
        this.remarks = remarks;
    }

    public List<CWCMeetingMinutesDTO> getcWCMeetingMinutesDTOs() {
        return cWCMeetingMinutesDTOs;
    }

    public void setcWCMeetingMinutesDTOs(List<CWCMeetingMinutesDTO> cWCMeetingMinutesDTOs) {
        this.cWCMeetingMinutesDTOs = cWCMeetingMinutesDTOs;
    }

    public CwcMinutes getCwcMinutes() {
        return cwcMinutes;
    }

    public void setCwcMinutes(CwcMinutes cwcMinutes) {
        this.cwcMinutes = cwcMinutes;
    }

    public CwcMinutesPK getCwcMinutesPK() {
        return cwcMinutesPK;
    }

    public void setCwcMinutesPK(CwcMinutesPK cwcMinutesPK) {
        this.cwcMinutesPK = cwcMinutesPK;
    }

    
    
    public List<CWCMinutesOverViewDTO> getCwcMeetingOverViewDTOList() {
        return cwcMeetingOverViewDTOList;
    }

    public void setCwcMeetingOverViewDTOList(List<CWCMinutesOverViewDTO> cwcMeetingOverViewDTOList) {
        this.cwcMeetingOverViewDTOList = cwcMeetingOverViewDTOList;
    }

    /*Swetha added on 05-02-2013 for multilingual START*/
    public String en() {
//english
  return "success";
}

public String hi() {
//hindi
System.out.println("hindi");
  return "success";
}

public String te() {
//telugu
System.out.println("telugu");
  return "success";
}
/*Swetha added on 05-02-2013 for multilingual END*/
    
    
    
      //for CWC Meetings minutes Register End//

    /*---------------Case worker Methods start-----------------------------*/

    public String admissionIntoRH()
    {
        String result="error";
     String homeIdFromSession=ActionContext.getContext().getSession().get("homeid").toString();
     String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
     
    
    System.out.println("date string for admisiion ---------------------------> "+getDateTimeAdm_String());
    
    Date admDate=StringToDate.getStringToDate(getDateTimeAdm_String());
   // Date admDate=StringToDate.getStringToDateTime(getDateTimeAdm_String(), (getHour()+":"+getMinute()));
    String yearString=StringToDate.getYear(getDateTimeAdm_String());
    
    //Date prbDisDate=StringToDate.getStringToDate(getProbableDischargeDate_String());
    Date orDate=StringToDate.getStringToDate(getOrderDate_String());
    Date intDate=StringToDate.getStringToDate(getIntCwcJjbDate_String());
    //System.out.println("Inside ----------------------CaseWorkerAction.admissionIntoRH()--- ");
    //System.out.println("Home id from Session = "+homeIdFromSession);
    //System.out.println("name of child = "+childMaster.getChildName());
    //System.out.println("nature of child = "+childMaster.getChildNature());
    //System.out.println("caseWorkerService ---------> "+caseWorkerService);
    childMaster.setDateTimeAdm(admDate);
    //childMaster.setProbableDischargeDate(prbDisDate);
    childMaster.setOrderDate(orDate);    
    childMaster.setIntCwcJjbDate(intDate);
    childMaster.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
    childMaster.setLastModifiedBy(userIdFromSession);
    result= caseWorkerService.addChild(childMaster,homeIdFromSession,yearString);

    if(result.equalsIgnoreCase("success"))
           setMessage(getText("msg.succ.childAdmInRU"));
    else if(result.equalsIgnoreCase("error"))
           setMessage(getText("mess.fail.childAdmInRU"));
    return result;
    
    //return "success";

    }
      

    
    public String caseworkDetails_save() 
    {
        String status="error";
         try{        
            //System.out.println("childDetails caste in save------------------->"+childDetails.getCaste());
          //System.out.println("childDetails Name in caseworksave------------------->"+childDetails.getChildName());
         childDetailsPK.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
         childDetailsPK.setChildProfileId(childProfileId);
         childDetails.setChildDetailsPK(childDetailsPK);
        // childDetails.setDob(getChildDetails_dob());
         //System.out.println("religion------------------------->>>"+childDetails.getReligion());
          //System.out.println("religion_other------------------------->>>"+getReligion_other());
        if(childDetails.getReligion().equalsIgnoreCase("Other")){        
        childDetails.setReligion(getReligion_other());
        }
         status=caseWorkerService.saveCasework(childDetails);
      } 
      catch(Exception e)
    {
    e.printStackTrace();
    }
          if(status.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.CWDetSave","SUCCESS",childProfileId));
    else if(status.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.CWDetSave","ERROR",childProfileId));    
     return status;
    }
   
    public String populateChildListforDischarge()
    {
    String result="error";
     String homeId=ActionContext.getContext().getSession().get("homeid").toString();
     
     try {
            //System.out.println("home id from session = "+homeId);
            //System.out.println(" caseWorkerService = "+caseWorkerService);
            
           // if(test_case.equalsIgnoreCase("cwbs")){ //cwbs casework before select
            setChildrenListInAHome(caseWorkerService.getChildrenList(homeId));
            result="success";
            
            }
     catch(Exception e)
     {
     e.printStackTrace();
     }
     
     return result;
    }

    
   public String populateAll()
   {
        String result="error";
    //System.out.println("---------- inside populateAllChildrenInAHome -------------");
   
    //get current home id
    String homeId=ActionContext.getContext().getSession().get("homeid").toString();

        try {
            //System.out.println("home id from session = "+homeId);
            //System.out.println(" caseWorkerService = "+caseWorkerService);
            
           // if(test_case.equalsIgnoreCase("cwbs")){ //cwbs casework before select
            setChildrenListInAHome(caseWorkerService.getChildrenList(homeId));
            result="success";
            
           // }
           /* else if(test_case.equalsIgnoreCase("cwas"))  //cwas casework after select
               {
                //System.out.println("inside----------------cwas");
                //System.out.println("fetched profile id----------------"+getChildProfileId());
                
                  setChildrenListInAHome(caseWorkerService.getChildrenList(homeId));
                   child_select=caseWorkerService.getChild_by_id(getChildProfileId());
                    result="success";
                   
               }*/
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }

      return "success";
   }
   
   
   public String getCaseworkChildDetails()
   {
   String result="error";
   
    String homeId=ActionContext.getContext().getSession().get("homeid").toString();
        try {
            setChildrenListInAHome(caseWorkerService.getChildrenList(homeId));
            child_select=caseWorkerService.getChild_by_id(getChildProfileId());
          result="success";
            
       } catch (Exception e) {
           e.printStackTrace();
           result="error";
       }
             
   
   
   return result;
   }

  
   
   
   public String getChildAndHomeLists()
   {
       
       String result="error";

       try {
           //System.out.println("----------------------------before populating the list--------------------");
           //set the child list
           //populateAll();
           populateChildListforDischarge();
           //System.out.println("----------------------------after populating the list-------------------- "+childrenListInAHome);

           //set the home list
           setHomeList(adminService.getAllHomes());

           result="success";

       } catch (Exception e) {

           e.printStackTrace();

       }

     return result;

   }


   public String discharge()
   {
   String status="error";
   String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
   String currentUserId=ActionContext.getContext().getSession().get("userid").toString();
   getTansferDischargeDTO().setLastmodifiedBy(currentUserId);
   //System.out.println("home id in discharge ---------------------------------- > "+currentHomeId);
   //System.out.println("DTO in discharge ---------------------------------- > "+tansferDischargeDTO.getActionTaken());
   //System.out.println("Profile id is--------------------->>>>>>>"+getTansferDischargeDTO().getChildIdToBeTransDis());
   //System.out.println("Transfer Home id is--------------------->>>>>>>"+getTansferDischargeDTO().getTransHomeId());
   //System.out.println("Remarks--------------------->>>>>>>"+getTansferDischargeDTO().getRemarks());
   
     status=caseWorkerService.dischargeTransferService(currentHomeId,getTansferDischargeDTO());

     if(status.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.disSucc","SUCCESS",getTansferDischargeDTO().getChildIdToBeTransDis()));
     else if(status.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.discharge","ERROR",getTansferDischargeDTO().getChildIdToBeTransDis()));    
     return status;
   
   }
   
     
  public String populateHomesInADistrict()
{
////System.out.println("*** Inside populateHomesInADistrict() *** districtId="+getUserDistrictId());
String result="error";

    try {
        //String districtFromReq=request.getParameter("userDistrictId");
        //System.out.println("_______________________________>>>>>request  = "+getUserDistrictId());
        setHomesInADistrict(adminService.getHomesInADistrictList(getUserDistrictId()));
        result="success";
    }   catch (Exception e) {
        e.printStackTrace();
    }
////System.out.println(" return value from populateHomesInADistrict()----------------------> "+result);
return result;

}
   
  
   public String getDistricts()   
  {  
     //System.out.println("inside get districts---------------------> ");
      String result="error";
    try {
       // List<DistrictMaster> temp=adminService.getDistrictList();
       // //System.out.println("Dist list returned---------------------> "+temp);
        Map dis_map=new HashMap();
        
        dis_map.put("ADI", getText("dis.adilabad"));
        dis_map.put("ANA", getText("dis.anantapur"));
        dis_map.put("CHI", getText("dis.chittoor"));
        dis_map.put("EGO", getText("dis.eastGoda"));
        dis_map.put("GUN", getText("dis.guntur"));
        dis_map.put("HYD", getText("dis.hyderabad"));
        dis_map.put("KAD", getText("dis.ysrDisKadapa"));
        dis_map.put("KAR", getText("dis.karimnagar"));
        dis_map.put("KHA", getText("dis.khammam"));
        dis_map.put("KRI", getText("dis.krishna"));
        dis_map.put("KUR", getText("dis.kurnool"));
        dis_map.put("MAH", getText("dis.mbNagar"));
        dis_map.put("MED", getText("dis.medak"));
        dis_map.put("NAL", getText("dis.nlgd"));
        dis_map.put("NEL", getText("dis.pottiSriRamNellore"));
        dis_map.put("NZB", getText("dis.nzmd"));
        dis_map.put("PRA", getText("dis.prakasam"));
        dis_map.put("RAN", getText("dis.rngrdy"));
        dis_map.put("SRI", getText("dis.sriKakulam"));
        dis_map.put("VIJ", getText("dis.vjngram"));
        dis_map.put("VIS", getText("dis.vskPatnam"));
        dis_map.put("VIJ", getText("dis.vjngram"));
        dis_map.put("WAR", getText("dis.wrgl"));
        dis_map.put("WGO", getText("dis.wg"));
        
                
       /* dis_list.add(getText("dis.adilabad","ADI"));
        dis_list.add(getText("dis.anantapur","ANA"));
        dis_list.add(getText("dis.chittoor","CHI"));
        dis_list.add(getText("dis.eastGoda","EGO"));
        dis_list.add(getText("dis.guntur","GUN"));
        dis_list.add(getText("dis.hyderabad","HYD"));
        dis_list.add(getText("dis.ysrDisKadapa","KAD"));
        dis_list.add(getText("dis.karimnagar","KAR"));
        dis_list.add(getText("dis.khammam","KHA"));
        dis_list.add(getText("dis.krishna","KRI"));
        dis_list.add(getText("dis.kurnool","KUR"));
        dis_list.add(getText("dis.mbNagar","MAH"));
        dis_list.add(getText("dis.medak","MED"));
        dis_list.add(getText("dis.nlgd","NAL"));
        dis_list.add(getText("dis.pottiSriRamNellore","NEL"));
        dis_list.add(getText("dis.nzmd","NZB"));
        dis_list.add(getText("dis.prakasam","PRA"));
        dis_list.add(getText("dis.rngrdy","RAN"));
        dis_list.add(getText("dis.sriKakulam","SRI"));
        dis_list.add(getText("dis.vjngram","VIJ"));
        dis_list.add(getText("dis.vskPatnam","VAS"));
        dis_list.add(getText("dis.wrgl","WAR"));
        dis_list.add(getText("dis.wg","WGO"));  */
       // setDistrictList(adminService.getDistrictList());
        
        setDistrictMap(dis_map);
        //System.out.println("district name---------------->>>>>"+getDistrictList().get(1));
        result="success";
    } catch (Exception e) {
        e.printStackTrace();
    }

return result;
  }
  
  
   

   //------for admission at CHB/G

   public String admissionToCH()
   {
       String result="error";

       try {
           String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
           setTransferedChildList(caseWorkerService.getTransferedChildListForThisHome(currentHomeId));
            //setTransChildDetails(caseWorkerService.);
           result="success";
       } catch (Exception e) {
           e.printStackTrace();
       }

     return result;

   }

   public String getTransferredChildDetails()
   {
    String result="error";

       try {
           //String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
           //setTransferedChildList(caseWorkerService.getTransferedChildListForThisHome(currentHomeId));
           setTransChildMaster(caseWorkerService.getTransferredChildDetails(getTransChildId()));
           setTransChildDetails(caseWorkerService.getExistingChildDetails(getTransChildId()));
           result="success";
       } catch (Exception e) {
           e.printStackTrace();
       }

     return result;



   }
      
   
    public String getCaseworkViewChildDetails()
   {
       
       setTransChildDetails( caseWorkerService.getExistingChildDetailsBasedOnProfileIdAndEntryDate(getChildProfileIdAndDateOfCaseWork()));
     
       return "success";

   }
   
   
   
   public String admissionToCHSave()
   {
       //System.out.println("hello I am here in admissionToCHSave");
       String result="error";
       String homeIdFromSession=ActionContext.getContext().getSession().get("homeid").toString();
       String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
   
        getAdmissiontoCHSHDTO().setLastModifiedBy(userIdFromSession);
        //System.out.println("TransChildid  in action-------------------->>>"+admissiontoCHSHDTO.getTransChildId());
        return caseWorkerService.addChildtoCHSH(childMaster,homeIdFromSession,getAdmissiontoCHSHDTO());
   
    }
   
   public String interviewRegister_Save()
   {
   String result="error";
   Date d1 =new Date();
   
       try {
            String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
            String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
               interviewRegisterPK.setChildProfileId(childProfileId);
               Date inter_date=StringToDate.getStringToDate(getInterviewDate_String());
               SimpleDateFormat sdf= new SimpleDateFormat("HH:mm:ss");
               Date inter_time=sdf.parse((getInterviewTime_String().substring(11, 19)));
              ////System.out.println("VINUMOLSSSSSSSSSSSSSSSSSSS"+inter_time);
               //String time1=sdf.format(inter_time);
             
             // Date inter_time1=StringToDate.getStringToDate(inter_time);
              Calendar calendarA = Calendar.getInstance();
              calendarA.setTime(inter_date);

              Calendar calendarB = Calendar.getInstance();
              calendarB.setTime(inter_time);

              calendarA.set(Calendar.HOUR_OF_DAY, calendarB.get(Calendar.HOUR_OF_DAY));
              calendarA.set(Calendar.MINUTE, calendarB.get(Calendar.MINUTE));
              Date result1 = calendarA.getTime();
              //System.out.println("VINUMOLSSSSSSSSSSSSSSSSSSSuuuuuuuuuuuuuuuuuuu"+result1);

               interviewRegisterPK.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
             //interviewRegisterPK.setInterviewDate(inter_date);
               interviewRegister.setInterviewRegisterPK(interviewRegisterPK);
               interviewRegister.setHomeId(currentHomeId);
               interviewRegister.setInterviewDate(result1);
               interviewRegister.setLastModifiedBy(userIdFromSession);
               result=caseWorkerService.saveInterViewDetails(interviewRegister);
           
       } catch (Exception e) {
           e.printStackTrace();
       }
          
        if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveIntrDet","SUCCESS",childProfileId));
        else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveIntrDet","ERROR",childProfileId));    
       
       
       return result;
   }
   
   
   //for CaseHistory it can be removed and can use getTransferredChildDetails()
   public String getch_ChildDetails()
    {String result="error";
        System.out.println("in method--->getch_ChildDetails()");
        
          try {
         String homeId=ActionContext.getContext().getSession().get("homeid").toString();
        System.out.println("homeid-------->"+homeId);  
        
      
            
            setTransChildMaster(caseWorkerService.getTransferredChildDetails(getChildProfileId()));
            setTransChildDetails(caseWorkerService.getExistingChildDetails(getChildProfileId()));
            result="success";
        } catch (Exception e) 
        {
            e.printStackTrace();
        }
    
       
    return result;
    }
   
   public String SaveCH_PersonalData()
   {
    String result="error";
            try {
                 String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
                casehistoryPersonalPK.setChildProfileId(childProfileId);
                casehistoryPersonalPK.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
                casehistoryPersonal.setCasehistoryPersonalPK(casehistoryPersonalPK);
                
                if(casehistoryPersonal.getReligion().equalsIgnoreCase("Others")){        
                    casehistoryPersonal.setReligion(getReligion_other());
                  }
                if(casehistoryPersonal.getLocalResidence().equalsIgnoreCase("Others")){
                casehistoryPersonal.setLocalResidence(getLocalResidence_other());
                }
                
                 if(casehistoryPersonal.getHousingType().equalsIgnoreCase("Others")){
                casehistoryPersonal.setHousingType(getHousingType_other());
                }
                
                  if(casehistoryPersonal.getReasonLeavingFamily().equalsIgnoreCase("Others")){
                casehistoryPersonal.setReasonLeavingFamily(getReasonLeavingFamily_other());
                }
                
                  if(casehistoryPersonal.getVerbalAbuse().equalsIgnoreCase("Others")){
                casehistoryPersonal.setVerbalAbuse(getVerbalAbuse_other());
                }
                 if(casehistoryPersonal.getSexualAbuse().equalsIgnoreCase("Others")){
                casehistoryPersonal.setSexualAbuse(getSexualAbuse_other());
                }
               
               /*  if(casehistoryPersonal.getOtherAbuse().equalsIgnoreCase("Others")){
                casehistoryPersonal.setOtherAbuse(getOtherAbuse_other());
                }*/
                  if(casehistoryPersonal.getIlltreatDenialFood().equalsIgnoreCase("Others")){
                casehistoryPersonal.setIlltreatDenialFood(getIlltreatDenialFood_other());
                }
                 
                 if(casehistoryPersonal.getIlltreatBeatenMercilessly().equalsIgnoreCase("Others")){
                casehistoryPersonal.setIlltreatBeatenMercilessly(getIlltreatBeatenMercilessly_other());
                }  
                if(casehistoryPersonal.getIlltreatCauseInjury().equalsIgnoreCase("Others")){
                casehistoryPersonal.setIlltreatCauseInjury(getIlltreatCauseInjury_other());
                }    
                
                /* if(casehistoryPersonal.getIlltreatOthers().equalsIgnoreCase("Others")){
                casehistoryPersonal.setIlltreatOthers(getIlltreatOthers_other());
                } */   
                 
                 if(casehistoryPersonal.getExploitationChild().equalsIgnoreCase("Others")){
                casehistoryPersonal.setExploitationChild(getExploitationChild_other());
                }   
                 
                 if(casehistoryPersonal.getChildStayPriorAdmission().equalsIgnoreCase("Others")){
                casehistoryPersonal.setChildStayPriorAdmission(getChildStayPriorAdmission_other());
                }   
                /* if(getHsbaOthers_data()!=null)
                 {
                 casehistoryPersonal.setHsbaOthers(getHsbaOthers_data());
                 }*/
                 
                 System.out.println("Object value -------------------------------->"+casehistoryPersonal);
                 
                 casehistoryPersonal.setLastModifiedBy(userIdFromSession);
                     result=caseWorkerService.saveCaseHistoryPersonal(casehistoryPersonal);    
                     
                     System.out.println("result -------------------------------->"+result);
                     
                      if(result.equalsIgnoreCase("success")){
        setMessage(getText("mess.succ.savePerDetCaseHis","SUCCESS",childProfileId));
        serverMessage.setMessageValue(getText("mess.succ.savePerDetCaseHis","SUCCESS",childProfileId));
        serverMessage.setMessageType("success");
        
      }
      
    else if(result.equalsIgnoreCase("error")){
       setMessage(getText("mess.fail.savePerDetCaseHis","ERROR",childProfileId)); 
       serverMessage.setMessageValue(getText("mess.fail.savePerDetCaseHis","ERROR",childProfileId));
       serverMessage.setMessageType("success");
    }
                      
                      setServerMessage(serverMessage);
           
       } catch (Exception e)
       {
           e.printStackTrace();
       }
            
     
    
      
      
      System.out.println("serverMessage value -------------------------------->"+serverMessage);
            
   return result;
   }
   
   public String saveCH_HouseHold()
   {
       String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
        String result="error";
       cHChildHouseholdDTO =new ArrayList<CHChildHouseholdDTO>(nameRelative.length);
        for(int i=0;i<nameRelative.length;i++)
        {
            casehistoryFamily.setChildProfileId(childProfileId);
            casehistoryFamily.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
            casehistoryFamily.setLastModifiedBy(userIdFromSession);
            casehistoryFamily.setNameRelative(getNameRelative()[i]);
            casehistoryFamily.setRelationship(getRelationship()[i]);
            casehistoryFamily.setEducation(getEducation()[i]);
            casehistoryFamily.setIncome(getIncome()[i]);
            casehistoryFamily.setHandicap(getHandicap()[i]);
            casehistoryFamily.setOccupation(getOccupation()[i]);
            casehistoryFamily.setHealth(getHealth()[i]);
            casehistoryFamily.setAge(getAge()[i]);
            
         result=caseWorkerService.saveCasehistoryChildhousehold(casehistoryFamily);
            
            
        }
        
         if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveHouHoldDetCaseHis","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveHouHoldDetCaseHis","ERROR",childProfileId));    
        
        
   return result;
   }
   
   public String saveCHFamilyDetails()
   {
   String result="error";
     String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
            String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
    
       try {
           casehistoryFamilyDetailsPK.setChildProfileId(childProfileId);
           casehistoryFamilyDetailsPK.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
           casehistoryFamilyDetails.setCasehistoryFamilyDetailsPK(casehistoryFamilyDetailsPK);
           casehistoryFamilyDetails.setLastModifiedBy(userIdFromSession);
            if(casehistoryFamilyDetails.getPropertyFamilyVehicals().equalsIgnoreCase("four_wheeler"))
            {
            casehistoryFamilyDetails.setPropertyFamilyVehicals(getPropertyFamilyVehicals_other());
            }
           result=caseWorkerService.savecasehistoryFamilyDetails(casehistoryFamilyDetails);
           
       } catch (Exception e) {
           e.printStackTrace();
       }
   
       if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveFamDetCaseHis","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveFamDetCaseHis","ERROR",childProfileId));    
       return result;
   }
    
   public String saveCHAdolscenceHistory()
   { 
       String result="error";
        //String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
            String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
            
            try {
           
                casehistoryAdolescenceDetailsPK.setChildProfileId(childProfileId);
                casehistoryAdolescenceDetailsPK.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
                casehistoryAdolescenceDetails.setCasehistoryAdolescenceDetailsPK(casehistoryAdolescenceDetailsPK);
                casehistoryAdolescenceDetails.setLastModifiedBy(userIdFromSession);
                ////System.out.println("get drug_abuse---------------------->>"+getHabits_drug());
                
                if(casehistoryAdolescenceDetails.getDeliquentBehaviour().equalsIgnoreCase("Others"))
                {
                casehistoryAdolescenceDetails.setDeliquentBehaviour(getDeliquentBehaviour_other());
                }
               if(casehistoryAdolescenceDetails.getReasonDeliquentBehaviour().equalsIgnoreCase("Others"))
                {
                casehistoryAdolescenceDetails.setReasonDeliquentBehaviour(getReasonDeliquentBehaviour_other());
                }
               
               if(casehistoryAdolescenceDetails.getSavingDetails().equalsIgnoreCase("Others"))
                {
                casehistoryAdolescenceDetails.setSavingDetails(getSavingDetails_other());
                }
                            
               result=caseWorkerService.savecasehistoryAdolescenceHistory(casehistoryAdolescenceDetails);
                
       } catch (Exception e) {
           e.printStackTrace();
       }
   
       if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveAdolDetCaseHis","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveAdolDetCaseHis","ERROR",childProfileId));        
   return result;
   }
   
   public String saveCHEmploymentDetails()
   {
   String result="error";
   
   String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
        cHEmploymentDetailsDTO =new ArrayList<CHEmploymentDetailsDTO>(detailsEmployment.length);
        //System.out.println("length----------------------->>>"+detailsEmployment.length);
          
        for(int i=0;i<detailsEmployment.length;i++)
           {
               casehistoryEmploymentDetails.setChildProfileId(childProfileId);
               casehistoryEmploymentDetails.setLastModifiedBy(userIdFromSession);
               casehistoryEmploymentDetails.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
               casehistoryEmploymentDetails.setDetailsEmployment(getDetailsEmployment()[i]);
               casehistoryEmploymentDetails.setDuration(getDuration()[i]);
               casehistoryEmploymentDetails.setWagesEarned(getWagesEarned()[i]);
               casehistoryEmploymentDetails.setExperienceatwork(getExperienceatwork()[i]);
              result=caseWorkerService.savecasehistoryEmploymentDetails(casehistoryEmploymentDetails);
           }
   
          if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveEmpDetCaseHis","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveEmpDetCaseHis","ERROR",childProfileId));       
        
   return result;
   }
   
   public String saveCHPriorAdmEducationDetails()
   {
   String result="error";
   String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
   
       try {
           casehistoryPrioradmEducationPK.setChildProfileId(childProfileId);
                 casehistoryPrioradmEducationPK.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
                 casehistoryPrioradmEducation.setCasehistoryPrioradmEducationPK(casehistoryPrioradmEducationPK);
                 casehistoryPrioradmEducation.setLastModifiedBy(userIdFromSession);
               if(casehistoryPrioradmEducation.getReasonLeavingSchool().equalsIgnoreCase("Others"))
               {
               casehistoryPrioradmEducation.setReasonLeavingSchool(getReasonLeavingSchool_other());
               }
               if(casehistoryPrioradmEducation.getMediumInstruction().equalsIgnoreCase("Others"))
               {
               casehistoryPrioradmEducation.setMediumInstruction(getMediumInstruction_other());
               }
              result=caseWorkerService.savecasehistoryPriorAdmEducationDetails(casehistoryPrioradmEducation);
       } catch (Exception e) {
           e.printStackTrace();
       }
       
         if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.savePriAdmEduDetCH","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.savePriAdmEduDetCH","ERROR",childProfileId));       
       
       return result;   
   }
 
   public String saveCHFamilyCrimeDetails()
   {
    String result="error";
   
   String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
        cHFamilyCrimeDetailsDTO =new ArrayList<CHFamilyCrimeDetailsDTO>(name.length);
        
        try {
             for(int i=0;i<name.length;i++)
           {
               casehistoryFamilyCrimeDetails.setChildProfileId(childProfileId);
               casehistoryFamilyCrimeDetails.setLastModifiedBy(userIdFromSession);
               casehistoryFamilyCrimeDetails.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
               casehistoryFamilyCrimeDetails.setName(getName()[i]);
               casehistoryFamilyCrimeDetails.setRelationship(getRelationship_crime()[i]);
               casehistoryFamilyCrimeDetails.setNatureCrime(getNatureCrime()[i]);
               casehistoryFamilyCrimeDetails.setPeriodConfinement(getPeriodConfinement()[i]);
               casehistoryFamilyCrimeDetails.setPunishment(getPunishment()[i]);
               casehistoryFamilyCrimeDetails.setArrestMade(getArrestMade()[i]);
               
               result=caseWorkerService.savecasehistoryFamilyCrimeDetails(casehistoryFamilyCrimeDetails);
              
           }
       } catch (Exception e) {
           e.printStackTrace();
       }
        
         if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveFamCriDetCH","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveFamCriDetCH","ERROR",childProfileId));    
    
   return result;
   }
   
   public String saveCHAfterAdmEducationDetails()
   {
   String result="error";
   String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
        cHAfterAdmEducationDTO =new ArrayList<CHAfterAdmEducationDTO>(yearAdmission.length);
        try {
            for(int i=0;i<yearAdmission.length;i++)
           {
            casehistoryAfteradmEducation.setChildProfileId(childProfileId);
            casehistoryAfteradmEducation.setLastModifiedBy(userIdFromSession);
            casehistoryAfteradmEducation.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
            casehistoryAfteradmEducation.setYearAdmission(getYearAdmission()[i]);
            casehistoryAfteradmEducation.setTypeAdmission(getTypeAdmission()[i]);
            casehistoryAfteradmEducation.setNameAdmission(getNameAdmission()[i]);
            casehistoryAfteradmEducation.setDetailsAdmission(getDetailsAdmission()[i]);
            casehistoryAfteradmEducation.setProficiency(getProficiency()[i]);
            casehistoryAfteradmEducation.setYearCompletion(getYearCompletion()[i]);
            result=caseWorkerService.savecasehistoryAfterAdmEducationDetails(casehistoryAfteradmEducation);
           }
       } catch (Exception e) {
           e.printStackTrace();
       }

    if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveEduDetAftAdmCH","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveEduDetAftAdmCH","ERROR",childProfileId));    
   return result;
   }
   
   public String saveCHSocialHistoryDetails()
   {
   String result="error";
    String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
    
       try {
           
     casehistorySocialhistoryPrioradmPK.setChildProfileId(childProfileId);
    casehistorySocialhistoryPrioradmPK.setLastModifiedDate(CurrentDateProvider.getCurrentDate());
    casehistorySocialhistoryPrioradm.setCasehistorySocialhistoryPrioradmPK(casehistorySocialhistoryPrioradmPK);
    casehistorySocialhistoryPrioradm.setLastModifiedBy(userIdFromSession);
    if(casehistorySocialhistoryPrioradm.getFriendshipDetails().equalsIgnoreCase("Others"))
    {
    casehistorySocialhistoryPrioradm.setFriendshipDetails(getFriendshipDetails_other());
     }
    if(casehistorySocialhistoryPrioradm.getPurposeMembership().equalsIgnoreCase("other"))
    {
    casehistorySocialhistoryPrioradm.setPurposeMembership(getPurposeMembership_other());
    }
    
   result=caseWorkerService.savecasehistorySocialHistoryDetails(casehistorySocialhistoryPrioradm);
           
       } catch (Exception e) {
           e.printStackTrace();
       }
    
        if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveSocHisDetCH","SUCCESS",childProfileId));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveSocHisDetCH","ERROR",childProfileId));    
   return result;
   
   }
   
   public String getInterviewRegisterDetails()
   {
   String result="error";
    String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
    String userIdFromSession=ActionContext.getContext().getSession().get("currentUser").toString();
      
       try {
           interviewRegister_show=caseWorkerService.getChildInterviewDetails(childProfileId);
           //System.out.println("List Size in interview register--------------->>>>>>"+interviewRegister_show.size());
           //System.out.println("list----------------------->>>>>>>"+interviewRegister_show);
           result="success";
           
       } catch (Exception e) {
           e.printStackTrace();
       }
    
     
   return result;
   
   }
   
   
   /* for cwc setting home ANUPAM START here*/
   public  String getHomesInADist()
   {
   //ActionContext.getContext().getSession().put("homeid", caseWorkerService. );
       setHomeMasters(caseWorkerService.getHomesOfACwcDist(ActionContext.getContext().getSession().get("userid").toString()));
       return "success";
   
   }
   
   public String putHomeIdInSession()
   {
   ActionContext.getContext().getSession().put("homeid", getHomeId().trim());
   return populateAll();
   }
   
   
   public String SaveCWCMeetingsMinutes(){
       //System.out.println("Entry---------------->>>");
       String result="error";
       cWCMeetingMinutesDTOs=new ArrayList<CWCMeetingMinutesDTO>();
       String homeid=ActionContext.getContext().getSession().get("homeid").toString();
       //System.out.println("before CWC ID---------------->>>");
       int cwcid=caseWorkerService.getCwcIdBasedOnUserIdAndStatus(ActionContext.getContext().getSession().get("userid").toString(), "active");
     //System.out.println("CWC ID and date ---------------->>>"+cwcid +"  "+getDateofcwcmeeting());
     
       Date orderdate=StringToDate.getStringToDate(getDateofcwcmeeting());
       
       //System.out.println("CWC ID and date ---------------->>>"+cwcid +"  "+orderdate);
       int meetingId=-1;
       try {
           
           getCwcMeetings().setMeetingDate(orderdate);
           getCwcMeetings().setCwcId(cwcid);
           getCwcMeetings().setNoOfMembers(noOfMembers);
           getCwcMeetings().setVenue(venue);
           
           //System.out.println("CWC Meetings---------------->>>"+getCwcMeetings());
           meetingId=caseWorkerService.saveMeeting(getCwcMeetings());
           //System.out.println("CWC Meetings Id---------------->>>"+meetingId);
           
           if(meetingId != -1)
           {
           
                for(int i=0;i<orderIssued.length;i++)
           {
               
               cwcMinutesPK.setMeetingId(meetingId);
               cwcMinutesPK.setChildProfileId(childProfileId_cwc[i]);
               cwcMinutes.setCwcMinutesPK(cwcMinutesPK);
               cwcMinutes.setCwcId(cwcid);
               cwcMinutes.setActiontobeTaken(actiontobeTaken[i]);
               cwcMinutes.setCwcJjbOrderNo(cwcJjbOrderNo[i]);
               cwcMinutes.setFollowUp(followUp[i]);
               cwcMinutes.setObservations(observations[i]);
               cwcMinutes.setOrderDate(orderdate);
               cwcMinutes.setOrderIssued(orderIssued[i]);
               cwcMinutes.setRemarks(remarks[i]);
               cwcMinutes.setHomeId(homeid);
               
               caseWorkerService.saveCWCMeetingsMinutes(cwcMinutes,childProfileId_cwc[i],ActionContext.getContext().getSession().get("userid").toString());
                       
           }           
             result="success";                
           }
           
           else 
           {
           result="error";
           }
           
          
       } catch (Exception e) {
           e.printStackTrace();
       }
       
        if(result.equalsIgnoreCase("success"))
        setMessage(getText("mess.succ.saveCWCMeetMin"));
    else if(result.equalsIgnoreCase("error"))
        setMessage(getText("mess.fail.saveCWCMeetMin"));  
         
       return result;
   }
   
   public String getMeetingDate()
   {
       String result="error";
       //System.out.println(getCwc_fromdate()+"--"+getCwc_todate()+"--"+request.getParameter("homeId"));
       String userid=ActionContext.getContext().getSession().get("userid").toString();
       Date from_date=StringToDate.getStringToDate(getCwc_fromdate());
       Date to_date=StringToDate.getStringToDate(getCwc_todate());
       request.setAttribute("userid", userid);
       String homid=request.getParameter("homeId").trim();//ActionContext.getContext().getSession().get("homeid").toString();
       
       try {
             //setCwcMinuteslist(caseWorkerService.getCwcMinutesDates(homid, from_date, to_date));//commented by anupam on 8-2-2012
           
             setCwcMeetingOverViewDTOList(caseWorkerService.getCwcMinutesOverViewDTOs(homid, from_date, to_date));//commented by anupam on 8-2-2012

           
           //System.out.println("cwcminutesOVERVIEW list------------------------------>>"+cwcMeetingOverViewDTOList);
         //  ActionContext.getContext().getSession().put("homeid",homeId);
           setHomeId(homid);
          
           result="success";
       } catch (Exception e) {
           e.printStackTrace();
       } 
   
   return result;
   }
   
   
   /**
    * 
    * public List<CwcMinutes>getCWCMeetingMinutesDetails(String homeid,Date selectdate);
    
    public CwcMeetings getCwcMeetingDetails(int meetingId);
    * @return 
    */
   public String getMeetingMinutes()
   { 
       //System.out.println("in side ------------------------------>>getMeetingMinutes()");
       String result="error";
   
   
          try {
              
              //----------Date stuff START
              
               String homeid=request.getParameter("homeid").trim();
         String theDate=getSelectedMeetingdate();
    String[] dateArr=theDate.split("/");
    theDate=dateArr[1]+"/"+dateArr[0]+"/"+"20"+dateArr[2];
    //System.out.println("the date----------------------------------------------------"+theDate);
   Date selectedDate=StringToDate.getStringToDate(theDate);
              
              //----------date stuff END
              
              
              
              
              //1.fetch the list of cwc minutes list
              
              setMinuteses(caseWorkerService.getCWCMeetingMinutesDetails(homeid, selectedDate));
              //getMinuteses().get(0).getCwcMinutesPK().getChildProfileId(); 
              //2.fetch meeting id from the list
              
              int meetingId=getMinuteses().get(0).getCwcMinutesPK().getMeetingId();
              
              //3.get the meeting details based on meeting id
              
              setCwcMeetings(caseWorkerService.getCwcMeetingDetails(meetingId));
              
              //System.out.println("------------------------------------------"+getMinuteses()+"----"+getCwcMeetings());
              
              result="success";
              
           
       } catch (Exception e) {
           e.printStackTrace();
       }
   
   
   return result;
   }
   
   //added by anupam on 29-02-2012 START
    public String getLoggedInhome()
    {
   return ActionContext.getContext().getSession().get("homeid").toString(); 
    
    }
   public String admissionCheck(){
       String result = "notfound";  
       List<ChildMaster> childMasters= new ArrayList<ChildMaster>();
       ////System.out.println("------inside admissionCheck------- childName = "+getChildName()+" ------ cwcNo = "+getCwcNo());
   if(getChildName().trim().equalsIgnoreCase("")&& !getCwcNo().trim().equalsIgnoreCase(""))
   {
      ////System.out.println("------inside admissionCheck------- IF "); 
   childMasters = caseWorkerService.getChildBasedOnCwcNoInAHome(getLoggedInhome(), getCwcNo());
   }
       else if(getCwcNo().trim().equalsIgnoreCase("") && !getChildName().trim().equalsIgnoreCase(""))
       {
        ////System.out.println("------inside admissionCheck------- ELSE IF ");    
       childMasters = caseWorkerService.getChildBasedOnNameInAHome(getLoggedInhome(), getChildName());
       }
           else{
           ////System.out.println("------inside admissionCheck------- ELSE");    
           childMasters = caseWorkerService.getChildBasedOnCwcNoOrNameInAHome(getLoggedInhome(), getCwcNo(), getChildName());
           }
   
   
               if(!childMasters.isEmpty())
               {
               setChildrenListInAHome(childMasters);
               result = "found";
               }
               else
               {
               result = "notfound";
               }
               
               setChildName(childName);
               String [] arr = {cwcNo};
               setCwcJjbOrderNo(arr);
      ////System.out.println("------inside admissionCheck------- return val =  "+result);     
   return result;
       
   } 
           
   //added by anupam on 29-02-2012 END
   
   //added by anupam on 2-3-2012 START
   public String  populateAvailableCaseWorkInAHome() {
       
       setChildrenListInAHome(caseWorkerService.populateAvailableCaseWorkInAHome(getLoggedInhome()));
       return "success";
       
    }
   
   
   
   //added by anupam on 2-3-2012 END
   
    /*---------------Case worker Methods End-----------------------------*/

    //Added by vinumol 08-03-2012
 public String getAdmissionRegisterDetails()
   {
       
       try
         {
            //System.out.println("this is viewAdmisionfirst");
            String child_homeid=getSession().get("homeid").toString();
            if(child_homeid == null ? "" == null : child_homeid.equals(""))
            {
             return "error";
            }
            else 
            {
                if(testing.equalsIgnoreCase("viewadmissionfirst"))
               {
                   return "success";
               }
                else if(testing.equalsIgnoreCase("viewadmission_dateselect"))
                        {
                            Date fromdate=StringToDate.getStringToDate(getAdmission_fromdate());
                            Date todate=StringToDate.getStringToDate(getAdmission_todate());
                            //System.out.println("The dates are...##################"+fromdate+"@@@@@@"+todate);
                            setChildrenListInAHome(caseWorkerService.viewAdmisiionChild_by_homeid(fromdate,todate,child_homeid));
                            ////System.out.println("The list is#################"+child_profid_list.get(0).getChildProfileId());
                            
                            return "success";
                        }
                       else if(testing.equalsIgnoreCase("viewadmission_profidselect"))  
                       {
                         admissionRegister_show=caseWorkerService.getChildAdmissionDetails(childProfileId);
                           return "success";
                       }
               
          
                else
                    return "success";    
            }
         }
      catch(Exception e)
      {
          e.printStackTrace();
          return "error";
      }
   }
 public String viewDischargeChildLists()
  {
      try
         {
            //System.out.println("this is viewDischargefirst");
            String childmaster_homeid=getSession().get("homeid").toString();
            if(childmaster_homeid == null ? "" == null : childmaster_homeid.equals(""))
            {
             return "error";
            }
            else 
            {
                if(testing.equalsIgnoreCase("viewdischargefirst"))
               {
                   return "success";
               }
                else if(testing.equalsIgnoreCase("viewdischarge_dateselect"))
                        {
                            Date fromdate=StringToDate.getStringToDate(getDischarge_fromdate());
                            Date todate=StringToDate.getStringToDate(getDischarge_todate());
                            //System.out.println("Tha dates are...##################"+fromdate+"@@@@@@"+todate);
                            setChild_profid_list(caseWorkerService.viewDischargeChild_by_homeid(fromdate,todate,childmaster_homeid));
                            ////System.out.println("The list is#################"+child_profid_list.get(0).getChildProfileId());
                            
                            return "success";
                        }
                       else if(testing.equalsIgnoreCase("viewdischarge_profidselect"))  
                       {
                         dreg=caseWorkerService.viewDischargeChild_by_Id(disreg_profid);
                           return "success";
                       }
               
          
                else
                    return "success";    
            }
         }
      catch(Exception e)
      {
          e.printStackTrace();
          return "error";
      }
  }
 public String getInterviewRegisterChildPID()
  {
       String result="error";
     String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
    try
    {
     setInterviewRegisterChild(caseWorkerService.getInterviewRegisterChildPID(currentHomeId));
    result="success";
    }
      catch (Exception e) {
           e.printStackTrace();
       }
  return result;
  }
 public String getCaseworkViewChildPID()
   {
    String result="error";
    String homeId=ActionContext.getContext().getSession().get("homeid").toString();

       try {
           //for getting child details from Child_details
           
          setChildPIDList(caseWorkerService.getCaseworkViewChildPID(homeId));
          //System.out.println("The list is+++++++++++++++"+getChildPIDList().get(0).getChildName());
          result="success";
       } catch (Exception e) {
           e.printStackTrace();
       }

     return result;

   }
 public String getCaseHistoryChildPid()
  {
    String result="error";
     String currentHomeId=ActionContext.getContext().getSession().get("homeid").toString();
    try
    {
     setCaseHistoryChildlist(caseWorkerService.getCaseHistoryChildPid(currentHomeId));
    result="success";
    }
      catch (Exception e) {
           e.printStackTrace();
       }
  return result;   
  }
   //Ended by vinumol 08-03-2012
  public Object getModel() {
        //throw new UnsupportedOperationException("Not supported yet.");
      try {
          
         //System.out.println("form_name------------------------->>>>>>***************************************"+request.getParameter("formName"));

          if(request.getParameter("formName").equalsIgnoreCase("casework"))        
                 
            { 
            //System.out.println("childDetails Name------------------->"+childDetails.getChildName());
            return childDetails;
            }
                else if(request.getParameter("formName").equalsIgnoreCase("discharge"))
                {
                return tansferDischargeDTO;
                }
                else if( request.getParameter("formName").equalsIgnoreCase("RHAdmission"))
                    {
                    return childMaster;
                    }

                 else if( request.getParameter("formName").equalsIgnoreCase("CHSHAdmission"))
                    {
                    return childMaster;
                    }
                     else if( request.getParameter("formName").equalsIgnoreCase("InterviewReg"))
                    {
                    return interviewRegister;
                    }    
                      else if( request.getParameter("formName").equalsIgnoreCase("ch_personal"))
                    {
                    return casehistoryPersonal;
                    } 
                     else if( request.getParameter("formName").equalsIgnoreCase("chhousehold"))
                    {
                    return cHChildHouseholdDTO;
                    }      
                       
                    else if( request.getParameter("formName").equalsIgnoreCase("chfamily"))
                    {
                    return casehistoryFamilyDetails;
                    }       
                   else if( request.getParameter("formName").equalsIgnoreCase("chadol"))
                    {
                    return casehistoryAdolescenceDetails;
                    }       
                   
                    else if( request.getParameter("formName").equalsIgnoreCase("chemployee"))
                    {
                    return cHEmploymentDetailsDTO;
                    }       
                       
                   
                   else if( request.getParameter("formName").equalsIgnoreCase("chpreeducation"))
                    {
                    return casehistoryPrioradmEducation;
                    }    
                           
                    else if( request.getParameter("formName").equalsIgnoreCase("chfamilycrime"))
                    {
                    return cHFamilyCrimeDetailsDTO;
                    }    
                    else if( request.getParameter("formName").equalsIgnoreCase("chaftereducation"))
                    {
                    return cHAfterAdmEducationDTO;
                    }    
                            
                 else if( request.getParameter("formName").equalsIgnoreCase("chsocial"))
                    {
                    return casehistorySocialhistoryPrioradm;
                    } 
                    else if( request.getParameter("formName").equalsIgnoreCase("CWView"))
                    {
                    return childDetails;
                    }   
             
                   else if( request.getParameter("formName").equalsIgnoreCase("Viewinterview"))
                    {
                    return interviewRegister;
                    } 
                    else if( request.getParameter("formName").equalsIgnoreCase("cwcmeets"))
                    {
                    return cWCMeetingMinutesDTOs;
                    }
                    else if( request.getParameter("formName").equalsIgnoreCase("view_cwcmeetings"))
                    {
                    return cwcMinutes;
                    }                
                     else if( request.getParameter("formName").equalsIgnoreCase("ViewCWCMeetingDetails"))
                    {
                    return cwcMinutes;
                    }         
                            
                    else
                    {
                    return "Hello";
                    }

      }
              

      catch (NullPointerException e) {
          //System.out.println("NPE------------------------->>>>>>88888888888888888888888888888888888888888888888888888888");
       return "Hello";
      }
      

    }

    public CaseWorkerAction() {
    }
    
    //added by anupam 12-07-2012 START
    public String getListofOverStayedChildren(){
    
        System.out.println("ACTION ------------IN");
        List<StayingPeriodOfChildDTO> stl = caseWorkerService.getOverStayingChildren(ActionContext.getContext().getSession().get("homeid").toString(), 4);
        setStayingPeriodOfChildDTOList(stl);
        //Iterator<StayingPeriodOfChildDTO> i = stl.iterator();
        
        /*for (Iterator<StayingPeriodOfChildDTO> it = stl.iterator(); it.hasNext();) {
            StayingPeriodOfChildDTO stayingPeriodOfChildDTO = it.next();
            System.out.println(" ---------------- "+stayingPeriodOfChildDTO);
        }*/
        
        return "success";
    }
    
    private List<StayingPeriodOfChildDTO> stayingPeriodOfChildDTOList;
   
   
     public List<StayingPeriodOfChildDTO> getStayingPeriodOfChildDTOList() {
        return stayingPeriodOfChildDTOList;
    }

    public void setStayingPeriodOfChildDTOList(List<StayingPeriodOfChildDTO> stayingPeriodOfChildDTOList) {
        this.stayingPeriodOfChildDTOList = stayingPeriodOfChildDTOList;
    }

    
    
    //added by anupam 12-07-2012 END

    //added by suresh for ICP on 12-10-2012 start
    public String getICPChildMaster()
    {
         String homeId=ActionContext.getContext().getSession().get("homeid").toString();
        String result="error";
        try {
            setTransChildMaster(caseWorkerService.getTransferredChildDetails(getChildProfileId()));
            setTransChildDetails(caseWorkerService.getExistingChildDetails(getChildProfileId()));
            result="success";
        } catch (Exception e) 
        {
            return "error";
        }
      
             return result;
    }
     //added by suresh for ICP on 12-10-2012 ends
    
    public String populateHomeNamesInADistMap(){
    
        setHomesInADistrictMap(caseWorkerService.getOtherHomesInADistrict(userDistrictId, getLoggedInhome()));
        
        return "success"; 
    
    }
    
    public String populateChildDTOforDischarge(){
        
        String result="error";
     String homeId=ActionContext.getContext().getSession().get("homeid").toString();
     
     try {            
            setChildDTOList(caseWorkerService.getChildDTOListByHomeAndStatus(homeId,"ACTIVE"));
            result="success";
            
          }
     catch(Exception e)
     {
     e.printStackTrace();
     }
     
     return result;
    
    }
    
    public String populateChildDTOforAdmission(){
        String result = "error";
        
     try {            
            setChildDTOList(caseWorkerService.getChildDTOListByHomeAndStatus(homeId,"transfer"));
            result="success";            
            }
     catch(Exception e)
     {
     e.printStackTrace();
     }
     
     return result;
    
    }
    
    public String dummyMethod(){
    //this method is kept only for multilingual strings access in a package
        return "success";
    }
    
    
}